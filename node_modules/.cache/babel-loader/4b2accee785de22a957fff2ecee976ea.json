{"ast":null,"code":"import axios from 'axios';\nimport config from '../config/config';\nimport { authHeader } from \"../helper/authHeader\";\nlet jwt = null;\n\nclass Auth {\n  constructor() {\n    this.logOut = () => {\n      localStorage.removeItem('user');\n      jwt = null;\n    };\n\n    this.apiUrl = config.API_URL;\n  }\n\n  async login(params) {\n    let res = await this.apiCall({\n      url: 'authenticate',\n      method: 'POST',\n      params: params\n    });\n    return res;\n  }\n\n  getUser() {\n    if (jwt) {\n      return jwt.user;\n    } else {\n      return null;\n    }\n  }\n\n  saveUser(user) {\n    try {\n      if (user) {\n        localStorage.setItem('user', JSON.stringify(user));\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  loadUser() {\n    try {\n      let user = localStorage.getItem('user');\n\n      if (user) {\n        user = JSON.parse(user);\n      }\n\n      if (user && user.token) {\n        jwt = user;\n        let token = user.token;\n        this.token = token;\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  async apiCall(option) {\n    option.method = option.hasOwnProperty('method') ? option.method : 'GET';\n    option.params = option.hasOwnProperty('params') ? option.params : null;\n    let headers = authHeader();\n\n    try {\n      const res = await axios({\n        method: option.method,\n        headers: headers,\n        url: \"\".concat(this.apiUrl).concat(option.url),\n        data: option.params,\n        validateStatus: status => {\n          return true;\n        }\n      });\n      return res.data;\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n}\n\nexport default new Auth();","map":{"version":3,"sources":["/Volumes/Phuong/project/wallet_app/src/services/Auth.js"],"names":["axios","config","authHeader","jwt","Auth","constructor","logOut","localStorage","removeItem","apiUrl","API_URL","login","params","res","apiCall","url","method","getUser","user","saveUser","setItem","JSON","stringify","e","console","log","loadUser","getItem","parse","token","option","hasOwnProperty","headers","data","validateStatus","status"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AACA,SAAQC,UAAR,QAAyB,sBAAzB;AAEA,IAAIC,GAAG,GAAG,IAAV;;AAEA,MAAMC,IAAN,CAAW;AACPC,EAAAA,WAAW,GAAG;AAAA,SAcdC,MAdc,GAcL,MAAM;AACXC,MAAAA,YAAY,CAACC,UAAb,CAAwB,MAAxB;AACAL,MAAAA,GAAG,GAAG,IAAN;AACH,KAjBa;;AACV,SAAKM,MAAL,GAAcR,MAAM,CAACS,OAArB;AAEH;;AAED,QAAMC,KAAN,CAAYC,MAAZ,EAAoB;AAChB,QAAIC,GAAG,GAAG,MAAM,KAAKC,OAAL,CAAa;AACzBC,MAAAA,GAAG,EAAE,cADoB;AAEzBC,MAAAA,MAAM,EAAE,MAFiB;AAGzBJ,MAAAA,MAAM,EAAEA;AAHiB,KAAb,CAAhB;AAKA,WAAOC,GAAP;AACH;;AAODI,EAAAA,OAAO,GAAG;AACN,QAAId,GAAJ,EAAS;AACL,aAAOA,GAAG,CAACe,IAAX;AACH,KAFD,MAEO;AACH,aAAO,IAAP;AACH;AACJ;;AAEDC,EAAAA,QAAQ,CAACD,IAAD,EAAO;AACX,QAAI;AACA,UAAIA,IAAJ,EAAU;AACNX,QAAAA,YAAY,CAACa,OAAb,CAAqB,MAArB,EAA6BC,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAA7B;AACH;AACJ,KAJD,CAIE,OAAOK,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;;AAEDG,EAAAA,QAAQ,GAAG;AACP,QAAI;AACA,UAAIR,IAAI,GAAGX,YAAY,CAACoB,OAAb,CAAqB,MAArB,CAAX;;AACA,UAAIT,IAAJ,EAAU;AACNA,QAAAA,IAAI,GAAGG,IAAI,CAACO,KAAL,CAAWV,IAAX,CAAP;AACH;;AACD,UAAIA,IAAI,IAAIA,IAAI,CAACW,KAAjB,EAAwB;AACpB1B,QAAAA,GAAG,GAAGe,IAAN;AACA,YAAIW,KAAK,GAAGX,IAAI,CAACW,KAAjB;AACA,aAAKA,KAAL,GAAaA,KAAb;AACH;AACJ,KAVD,CAUE,OAAON,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AAEJ;;AAED,QAAMT,OAAN,CAAcgB,MAAd,EAAkD;AAC9CA,IAAAA,MAAM,CAACd,MAAP,GAAgBc,MAAM,CAACC,cAAP,CAAsB,QAAtB,IAAkCD,MAAM,CAACd,MAAzC,GAAkD,KAAlE;AACAc,IAAAA,MAAM,CAAClB,MAAP,GAAgBkB,MAAM,CAACC,cAAP,CAAsB,QAAtB,IAAkCD,MAAM,CAAClB,MAAzC,GAAkD,IAAlE;AACA,QAAIoB,OAAO,GAAG9B,UAAU,EAAxB;;AACA,QAAI;AACA,YAAMW,GAAG,GAAG,MAAMb,KAAK,CAAC;AACpBgB,QAAAA,MAAM,EAAEc,MAAM,CAACd,MADK;AAEpBgB,QAAAA,OAAO,EAAEA,OAFW;AAGpBjB,QAAAA,GAAG,YAAK,KAAKN,MAAV,SAAmBqB,MAAM,CAACf,GAA1B,CAHiB;AAIpBkB,QAAAA,IAAI,EAAEH,MAAM,CAAClB,MAJO;AAKpBsB,QAAAA,cAAc,EAAEC,MAAM,IAAI;AACtB,iBAAO,IAAP;AACH;AAPmB,OAAD,CAAvB;AASA,aAAOtB,GAAG,CAACoB,IAAX;AACH,KAXD,CAWE,OAAOV,CAAP,EAAU;AACRC,MAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACH;AACJ;;AAzEM;;AA4EX,eAAe,IAAInB,IAAJ,EAAf","sourcesContent":["import axios from 'axios';\nimport config from '../config/config';\nimport {authHeader} from \"../helper/authHeader\";\n\nlet jwt = null;\n\nclass Auth {\n    constructor() {\n        this.apiUrl = config.API_URL;\n\n    }\n\n    async login(params) {\n        let res = await this.apiCall({\n            url: 'authenticate',\n            method: 'POST',\n            params: params\n        });\n        return res;\n    }\n\n    logOut = () => {\n        localStorage.removeItem('user');\n        jwt = null;\n    };\n\n    getUser() {\n        if (jwt) {\n            return jwt.user;\n        } else {\n            return null;\n        }\n    };\n\n    saveUser(user) {\n        try {\n            if (user) {\n                localStorage.setItem('user', JSON.stringify(user));\n            }\n        } catch (e) {\n            console.log(e);\n        }\n    };\n\n    loadUser() {\n        try {\n            let user = localStorage.getItem('user');\n            if (user) {\n                user = JSON.parse(user);\n            }\n            if (user && user.token) {\n                jwt = user;\n                let token = user.token;\n                this.token = token;\n            }\n        } catch (e) {\n            console.log(e);\n        }\n\n    }\n\n    async apiCall(option: Option & { token: string }) {\n        option.method = option.hasOwnProperty('method') ? option.method : 'GET';\n        option.params = option.hasOwnProperty('params') ? option.params : null;\n        let headers = authHeader();\n        try {\n            const res = await axios({\n                method: option.method,\n                headers: headers,\n                url: `${this.apiUrl}${option.url}`,\n                data: option.params,\n                validateStatus: status => {\n                    return true;\n                },\n            });\n            return res.data;\n        } catch (e) {\n            console.log(e)\n        }\n    }\n}\n\nexport default new Auth();\n"]},"metadata":{},"sourceType":"module"}